library(foreach)
install.packages(foreach)
library(doParallel)
install.packages(doParallel)
install.packages("foreach")
install.packages("doParallel")
library(dplyr)
install.packages(PogromcyDanych)
install.packages("PogromcyDanych")
library(dplyr)
filter(koty_ptaki, predkosc>100)
library(PogromcyDanych)
filter(koty_ptaki, predkosc>100)
filter(koty_ptaki,
predkosc > 100,
druzyna == "Ptak",
habitat %in% c("Polnoc", "Euroazja")
)
glimpse(auta2012)
(noweAuta<-filter(auta2012, Rok.produkcji>2007))
glimpse(auta2012)
mlodeFiaty<-filter(auta2012, Model == Fiat500)
mlodeFiaty<-filter(auta2012, Model == "Fiat 500")
View(mlodeFiaty)
mlodeFiaty<-filter(auta2012, Model == "Fiat500")
auta2012$Model
mlodeFiaty<-filter(auta2012, Model == "500")
dim(mlodeFiaty)
View(mlodeFiaty)
koty_ptaki
library (dplyr)
wynik<-filter(koty_ptaki, dlugosc>1)
View(wynik)
install.packages ("KernSmooth")
library(KernSmooth)
print ("Data Scientist Toolbox project")
install.packages("installr")
updateR(F, T, T, F, T, F, T)
library(installr)
updateR(F, T, T, F, T, F, T)
install.packages(c("BH", "manipulate", "testthat", "XML"))
x<-4L
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
?par
?transform
?axis
?splom
?trellis.par.set
?print.trellis
?lattice
?xyplot
??xyplot
??trellis.par.set
??splom
??print.trellis
??trellis.par.set
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z<-10
f(3)
?str
?intersect
library(SmarterPoland)
getDBLsearch("czas")
getBDLsearch("czas")
pracujacy <- getBDLseries(metric_id = "744")
install.packages("SmarterPoland")
install.packages("SmarterPoland")
getBDLsearch("czas")
pracujacy <- getBDLseries(metric_id = "744")
getBDLseries(metric_id = 60, time_range= '2010:2010', gmina_id = '*')
library(SmarterPoland)
getBDLsearch("czas")
getBDLseries(metric_id = 60, time_range= '2010:2010', gmina_id = '*')
getMPpowiaty
getBDLtree (debug=0, raw=TRUE)
getBDLseries(metric_id = 60, time_range= '2010:2010', gmina_id = '*')
getBDLsearch("czas")
getBDLsearch("czas")
pracujacy <- getBDLseries(metric_id = "744")
pracujacy <- getBDLseries(metric_id = "2466")
library(zoo)
library(dplyr)
setwd("D:/R/Robo/Course5")
data<-read.csv("activity.csv", header=TRUE, sep=",")
#data for histogram
hist<-aggregate(data$steps, by=list(data$date), FUN=sum)
#histogram
hist(hist$x, main="Total number of steps taken each day", xlab="Steps")
hist<-aggregate(data$steps, by=data$date, FUN=sum)
#histogram
hist(hist$x, main="Total number of steps taken each day", xlab="Steps")
abline(y=meanS, col="red")
meanS<-aggregate(data$steps, by=list(data$date), FUN=mean)
abline(y=meanS, col="red")
abline(h=meanS, col="red")
abline(h=as.integer(meanS), col="red")
View(meanS)
meanS<-mean(data$steps)
meanS<-mean(data$steps, na.rm=TRUE)
abline(h-meanS, col="red")
abline(h=meanS, col="red")
abline(v=meanS, col="red")
meanS<-mean(hist$x, na.rm=TRUE)
abline(v=meanS, col="red")
hist(hist$x, main="Total number of steps taken each day", xlab="Steps")
#mean and median number of steps taken per day
#meanS<-aggregate(data$steps, by=list(data$date), FUN=mean)
meanS<-mean(hist$x, na.rm=TRUE)
abline(v=meanS, col="red")
abline(v=medianS, col="blue")
medianS<-aggregate(hist$x, by=list(data$date), FUN=median)
abline(v=medianS, col="blue")
medianS<-median(hist$x)
abline(v=medianS, col="blue")
medianS<-median(hist$x, na.rm=TRUE)
abline(v=medianS, col="blue")
dataNA<-na.omit(data)
daily<-aggregate(dataNA$steps, by=list(dataNA$interval), FUN=mean)
plot(x=daily[,1], y=daily[,2], type="l")
plot(x=daily[,1], y=daily[,2], type="l", main="", xlab="5-minute interval", ylab="Average number of steps taken")
#daily acitivity max steps 5-minute interval
max(data$interval)
2400/12
2355/5
471/12
plot(x=daily[,1], y=daily[,2], type="l", col="blue", main="", xlab="5-minute interval", ylab="Average number of steps taken")
#daily acitivity max steps 5-minute interval
max<-aggregate(dataNA$steps, by=list(dataNA$interval), FUN=max)
max[which.max(max$x),]
sum(is.na(data))
sum(is.na(data))/nrow(data)*100
NAreplace<-na.aggregate(data$steps, by=list(data$interval))
dataNew<-data
dataNew[,1]<-NAreplace
#new histogram
histNew<-aggregate(dataNew$steps, by=list(dataNew$date), FUN=sum)
hist(histNew$x, main="Total number of steps taken each day without NA", xlab="Steps")
meanNAS<-mean(histNew$x)
#medianNAS<-aggregate(dataNA$steps, by=list(dataNA$date), FUN=median)
medianNAS<-median(histNew$x)
